
def option4(Loaded_records):
    ''' This function helps us add a new customer. We can add details, where name is a required field.
    The new cusomer gets a unique autogenerated customer id. '''
    
    print("\nAdd new customer")
    
    while True:
        name = input("\nPlease enter customer's name*: ")
        if name != "":
            break
    postcode = input("Please enter customer's postcode: ")
    phone_number = input("Please enter customer's phone number: ")
    
    customer_data = Loaded_records.get("customer_records", {})
    customer_ids = []
    [customer_ids.append(int(key)) for key in customer_data.keys()]
        
    cust_id = 0
    for i in range(100000, 999999):
        if i not in customer_ids:
            cust_id = i
            break
    
    cust_id = str(cust_id)    
        
    new_customer = {
            'cust_id': cust_id,
            'name': name,
            'postcode': postcode,
            'phone number': phone_number
        }
    
    Loaded_records['customer_records'][cust_id] = new_customer
    
    print()
    
    for key, value in customer_data.items():
        if key == cust_id:
            print(key, value)
            break
    
    print("New customer added")
    return Loaded_records

def option5(Loaded_records):
    ''' This function helps us add a new transaction, the user must give a customer id to whom the
    transaction belongs. if the customer exists, a new transaction detail can be added and it gets a
    unique autogenerated transaction id '''
    
    print("Add new transaction")
    
    customer_data = Loaded_records.get("customer_records", {})
    sales_data = Loaded_records.get("sales_records", {})
    
    customer_ids = []
    [customer_ids.append(key) for key in customer_data.keys()]
    
    while True:
        customer_id = input("\nPlease enter customer's id* or 'stop' to quit: ")
        if customer_id != "":
            if customer_id in customer_ids:
                date = input("Please enter the date of transaction (YYYY-MM-DD): ")
                category = input("Please enter the category of purchase: ")
                trans_value = input("Please enter the value of purchase: ")
                break
            else:
                print("customer id does not exist in memory")
    
    trans_ids = []
    [trans_ids.append(int(key)) for key in sales_data.keys()]
        
    for i in range(100000000, 999999999):
        if i not in trans_ids:
            trans_id = i
            break
    
    trans_id = str(trans_id)    
        
    new_trans = {
            "date": date,
            "trans_id": trans_id,
            "customer_id": customer_id,
            "category": category,
            "value": trans_value
        }
    
    Loaded_records['sales_records'][trans_id] = new_trans
    
    print()
    
    for key, value in sales_data.items():
        if key == trans_id:
            print(key, value)
            break
    
    print("New transaction added")
    return Loaded_records

def option6(Loaded_records):
    ''' This function helps us search through customer records using a case-insensitive string.
    The search is made across customer id, name, postcode and phone number '''
    
    print("\nSearch customer records")
    customer_data = Loaded_records.get("customer_records", {})
    
    while True:
        search_string = input("\nPlease enter a search string: ").lower()
        matches = {}
        for key, value in customer_data.items():
            if (search_string in value['cust_id'] or
                search_string in value['name'].lower() or
                search_string in value['postcode'] or
                search_string in value['phone number']):
                
                matches[key] = value
        
        if matches:
            for key, value in matches.items():
                print(key, value)
            print("\nSearch complete")
            break
        
        else:
            print("no records found")
            break
    
    return

def option7(Loaded_records):
    ''' This function helps us search for a sales record by using a case insensitive string.
    The search is made across date, customer id, category and value. '''
    
    print("\nSearch sales records")
    
    sales_data = Loaded_records.get("sales_records", {})
    
    while True:
        search_string = input("\nPlease enter a search string: ").lower()
        matches = {}
        for key, value in sales_data.items():
            if (search_string in value['date'] or
                search_string in value['customer_id'].lower() or
                search_string in value['category'] or
                search_string in str(value['value'])):
                
                matches[key] = value
        
        if matches:
            for key, value in matches.items():
                print(key, value)
            print("\nSearch complete")
            break
            
        else:
            print("no records found")
            break
                
    return

def option8(Loaded_records):
    ''' This function helps us search for all transactions a customer has made using their customer id.
    if the customer id exists, all related transactions are listed. '''
    
    print("\nsales records from a customer using his/her customer id.")
    customer_data = Loaded_records.get("customer_records", {})
    sales_data = Loaded_records.get("sales_records", {})
    customer_ids = []
    [customer_ids.append(key) for key in customer_data.keys()]
    
    while True:
        customer_id = input("\nPlease enter customer's id*: ")
        if customer_id != "":
            if customer_id in customer_ids:
                matches = {}
                for key, value in sales_data.items():
                    if customer_id in value["customer_id"]:
                        matches[key] = value
                
                if matches:
                    num = 1
                    for key, value in matches.items():
                        print(f"{num}. {value}")
                        num += 1
                    break
                
                else:
                    print("No customer transactions found")
                    break
                
            else:
                print("Customer ID does not exist")
                break
        
    return

def option9(Loaded_records):
    ''' This function helps us delete a sales record by using it's transaction id. '''
    
    print("\nDelete sales record")
    
    record = "sales_records"
    sales_data = Loaded_records.get(record, {})
    
    trans_ids = []
    [trans_ids.append(key) for key in sales_data.keys()]

    while True:
        trans_id = input("\nPlease enter transaction id*: ")
        if trans_id != "":
            if trans_id in trans_ids:
                print(f"\n{Loaded_records[record][trans_id]}\nTransaction deleted")  
                del Loaded_records[record][trans_id]
                break
                                        
            else:
                print("No transactions found")
                break
        
    return Loaded_records

def option10(Loaded_records):
    ''' This function helps us delete a customer using his/her customer id. It also deletes all of his/her
    transactions. '''
    
    print("\nDelete customer and related transactions")
    
    record = "customer_records"
    customer_data = Loaded_records.get(record, {})
    sales_data = Loaded_records.get("sales_records", {})
    
    cust_ids = []
    [cust_ids.append(value['cust_id']) for value in customer_data.values()]
    
    while True:
        cust_id = input("\nPlease enter customer id*: ")
        if cust_id != "":
            if cust_id in cust_ids:
                print(f"\n{Loaded_records[record][cust_id]}\ncustomer deleted")  
                del Loaded_records[record][cust_id]
                        
                trans_to_delete = []
                for key, value in sales_data.items():
                    if cust_id == value['customer_id']:
                        trans_to_delete.append(key)
                
                for i in trans_to_delete:
                    print(f"\n{Loaded_records['sales_records'][i]}\ntransaction deleted")  
                    del Loaded_records['sales_records'][i]   
                break          

            else:
                print("No customer found")
                break
                
    return Loaded_records
